# Yeelight C900 LED Silent Ceiling Fan
# YLFD002 / YLFD008

substitutions:
  name: yeelight-light-fancl5
  external_components_source: github://syssi/esphome-yeelight-ceiling-light@main

esphome:
  name: ${name}
  # Workaround to fix the boot loop if BLE is enabled
  # See https://github.com/syssi/esphome-yeelight-ceiling-light#known-bugs
  on_loop:
    - lambda: "vTaskDelay(10/portTICK_PERIOD_MS);"

esp32:
  board: esp32doit-devkit-v1
  framework:
    type: esp-idf
    sdkconfig_options:
      CONFIG_FREERTOS_UNICORE: y
    advanced:
      ignore_efuse_mac_crc: true

external_components:
  - source: ${external_components_source}
    refresh: 0s

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

ota:
api:
logger:

globals:     
   - id: update_step
     type: float
     # update this for color_temperature and brightness update
     initial_value: '0.15'
   - id: fan_speed_loop_flag
     type: int
     initial_value: '0'
     restore_value: yes
     
uart:
  baud_rate: 9600
  rx_pin: GPIO16
  tx_pin: GPIO17
  debug:
    direction: BOTH

fan:
  - platform: yeelight_fan_controller
    id: yeelight_ceiling_fan
    name: "${name} ceiling fan"

output:
  - platform: ledc
    pin: GPIO19
    id: output_warm
  - platform: ledc
    pin: GPIO21
    id: output_cold
  - platform: ledc
    pin: GPIO23
    id: output_nightlight

switch:
  - platform: gpio
    pin: GPIO33
    id: buzzer_beep
    on_turn_on:
      - delay: 100ms
      - switch.turn_off: buzzer_beep

light:
  - platform: monochromatic
    name: "${name} night light"
    id: night_light
    output: output_nightlight
    gamma_correct: 0
    on_turn_on:
      - light.turn_off: ceiling_light
  - platform: cwww
    name: "${name} ceiling light"
    id: ceiling_light
    cold_white: output_cold
    warm_white: output_warm
    cold_white_color_temperature: 6500 K
    warm_white_color_temperature: 2700 K
    constant_brightness: true
    gamma_correct: 0
    on_turn_on:
      - light.turn_off: night_light

esp32_ble_tracker:
  scan_parameters:
    duration: 10min
    active: false

# change mac_address here    
xiaomi_ylyk01yl:
  mac_address: "A4:C1:38:6E:85:0B"
  last_button_pressed:
    name: "last button pressed"

  # Button             Keycode (YLYK01YL Ceiling Fan)
  # fan toggle         0
  # light toggle       1
  # wind speed         2
  # color temperature or brightness minus 3
  # wind mode          4
  # color temperature or brightness plus  5
  on_press:
    # toggle fan
    - keycode: 0
      then:
        - fan.toggle: yeelight_ceiling_fan
        - switch.turn_on: buzzer_beep
        
    # toggle ceiling light
    - keycode: 1
      then:
        - light.toggle: ceiling_light
        - switch.turn_on: buzzer_beep

    # three speed level control: 1 level = 1%(0x01), 2 level =50%(0x32), 3 level = 100%(0x64)  
    - keycode: 2
      then:
       - fan.turn_on: 
           id: yeelight_ceiling_fan
           speed: !lambda |-
              float speed;
              speed = id(fan_speed_loop_flag) * 50;
              id(fan_speed_loop_flag) += 1;
              if(id(fan_speed_loop_flag) > 2){
                id(fan_speed_loop_flag) = 0;
              }
              if( speed <= 100 && speed > 1)
                  return speed;
              else 
                  return 1;
       - switch.turn_on: buzzer_beep

    # brightness and color_temperature control (value: 0.01-1f)
    # color_temperature only support ceiling light，using update_step to userdefined update
    # ceiling light and night light brightness minus             
    - keycode: 3
      then:
        - if:
            condition: 
              light.is_on: ceiling_light
            then:
             - light.turn_on: 
                id: ceiling_light
                brightness: !lambda |-
                  float brightness;
                  brightness = id(ceiling_light).remote_values.get_brightness() - id(update_step);
                  if( brightness > 0.05f )
                      return brightness;
                  else 
                      return 0.05f;
             - switch.turn_on: buzzer_beep
        - if:
            condition: 
              light.is_on: night_light
            then:
             - light.turn_on: 
                id: night_light
                brightness: !lambda |-
                  float brightness;
                  brightness = id(night_light).remote_values.get_brightness() - id(update_step);
                  if( brightness > 0.05f )
                      return brightness;
                  else 
                      return 0.05f;
             - switch.turn_on: buzzer_beep           
        
    # fan mode FORWARD select for standord winds
    - keycode: 4
      then:
        - fan.turn_on:
           id: yeelight_ceiling_fan
           direction: forward
        - switch.turn_on: buzzer_beep
 

    # ceiling light and night light brightness plus
    - keycode: 5
      then:
        - if:
            condition: 
              light.is_on: ceiling_light
            then:
             - light.turn_on: 
                id: ceiling_light
                brightness: !lambda |-
                  float brightness;
                  brightness = id(ceiling_light).remote_values.get_brightness() + id(update_step);
                  if( brightness < 1.0f )
                      return brightness;
                  else 
                      return 1.0f;               
             - switch.turn_on: buzzer_beep
             
        - if:
            condition: 
              light.is_on: night_light
            then:
             - light.turn_on: 
                id: night_light
                brightness: !lambda |-
                  float brightness;
                  brightness = id(night_light).remote_values.get_brightness() + id(update_step);
                  if( brightness < 1.0f )
                      return brightness;
                  else 
                      return 1.0f;               
             - switch.turn_on: buzzer_beep

    # Trigger on any keycode
    - then:
        - logger.log:
            format: 'Button with keycode %d pressed'
            args: ['int(keycode)']

  on_long_press:
    # night light
    - keycode: 1
      then:
       - light.toggle: night_light
       - switch.turn_on: buzzer_beep
       
    # stepless cycle control speed
    - keycode: 2
      then:
        - fan.cycle_speed: yeelight_ceiling_fan
        - switch.turn_on: buzzer_beep
       
    # fan mode REVERSE select for circle winds
    - keycode: 4
      then:
        - fan.turn_on:
           id: yeelight_ceiling_fan
           direction: reverse
        - switch.turn_on: buzzer_beep

    # color_temperature control，only support by ceiling light (154K-370K)
    # color_temperature minus
    - keycode: 4
      then: 
        - if:
            condition: 
              light.is_on: ceiling_light
            then:
             - light.turn_on: 
                id: ceiling_light
                color_mode: COLD_WARM_WHITE
                color_temperature: !lambda |-
                  float color_temperature;
                  color_temperature = id(ceiling_light).remote_values.get_color_temperature() * (1 + id(update_step));
                  if(color_temperature < 370.0f)
                    return color_temperature;
                  else
                    return 370;
             - switch.turn_on: buzzer_beep          
    # color_temperature plus
    - keycode: 4
      then: 
        - if:
            condition: 
              light.is_on: ceiling_light
            then:   
             - light.turn_on: 
                id: ceiling_light
                color_mode: COLD_WARM_WHITE
                color_temperature: !lambda |-
                  float color_temperature;
                  color_temperature = id(ceiling_light).remote_values.get_color_temperature() * (1 - id(update_step));
                  if(color_temperature > 154.0f)
                     return color_temperature;
                  else 
                     return 154;
             - switch.turn_on: buzzer_beep          

    - then:
        - logger.log:
            format: 'Button with keycode %d long pressed'
            args: ['int(keycode)']
